# -*- coding: utf-8 -*-
"""measure_cortical_thickness_with_orange__and_red_coloring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MogC2Fr0Izs2qMFMwLAEsD0I1f28CetI
"""

!which conda

!conda --version

!which python

!python --version

!conda install --channel defaults conda python=3.7 --yes
!conda update --channel defaults --all --yes

!conda --version # now returns 4.8.3

!python --version

!conda create -y -n DL_DiReCT python=3.7

!source activate DL_DiReCT

!git clone https://github.com/SCAN-NRAD/DL-DiReCT.git

cd DL-DiReCT

!pip install -e .

!wget https://github.com/NeuroAI-HD/HD-BET/archive/master.zip

!unzip master.zip && rm master.zip

cd HD-BET-master

!pip install -e .



!source activate DL_DiReCT
!dl+direct --subject "/content/result.csv" --bet "/content/raw_t1_subject_02.nii.gz" "/content/sample_data"

import numpy as np
import numpy as np
import pandas as pd
import nibabel as nib
import matplotlib.pyplot as plt

import json
import cv2
import h5py
import imageio
from IPython.display import Image

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import backend as K 
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import (
    Activation,
    Conv3D,
    Conv3DTranspose,
    MaxPooling3D,
    UpSampling3D,
)
from tensorflow.keras.layers import concatenate
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

#from tensorflow.compat.v1.logging import INFO, set_verbosity

#set_verbosity(INFO)

K.set_image_data_format("channels_first")

thickness_map2 = np.array(nib.load('/content/sample_data/T1w_norm_thickmap.nii.gz').get_fdata())

thickness_map_noskull = np.array(nib.load('/content/sample_data/T1w_norm_noskull.nii.gz').get_fdata())

thickness_seg_noskull = np.array(nib.load('/content/sample_data/T1w_norm_seg.nii.gz').get_fdata())

thickness_map_noskull.shape

thickness_map2.shape

def visualize_data_gif(data_):
    images = []
    for i in range(data_.shape[0]):
        x = data_[min(i, data_.shape[0] - 1), :, :]
        y = data_[:, min(i, data_.shape[1] - 1), :]
        z = data_[:, :, min(i, data_.shape[2] - 1)]
        img = np.concatenate((x, y, z), axis=1)
        images.append(img)
    imageio.mimsave("./gif.gif", images, duration=0.01)
    return Image(filename="./gif.gif", format='png')

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 
visualize_data_gif(thickness_map2)

fig_rows = 4
fig_cols = 4
n_subplots = fig_rows * fig_cols
n_slice = thickness_map2.shape[0]
step_size = n_slice // n_subplots
plot_range = n_subplots * step_size
start_stop = int((n_slice - plot_range) / 2)

fig, axs = plt.subplots(fig_rows, fig_cols, figsize=[10, 10])

for idx, img in enumerate(range(start_stop, plot_range, step_size)):
    axs.flat[idx].imshow(thickness_map2[img, :, :], cmap='copper')
    axs.flat[idx].axis('off')
        
plt.tight_layout()
plt.show()

import imageio as iio
import scipy.ndimage as ndi
import numpy as np
import matplotlib.pyplot as plt

x2 = np.zeros(shape=(256,256))
for i in range(100,180):
  print(f'slices{i}')
  plt.imshow(ndi.rotate(thickness_seg_noskull[:, :,i], 270), cmap='hot')
  plt.axis('off')
  plt.show()

x2 = np.zeros(shape=(256,256))
for i in range(140,160):
  print(f'slices{i}')
  plt.imshow(ndi.rotate(thickness_map2[:, :,i], 270), cmap='hot')
  plt.axis('off')
  plt.show()

x2 = np.zeros(shape=(256,256))
for i in range(0,256):
  x2+= ndi.rotate(thickness_map2[:, :,i], 270)
plt.imshow(x2, cmap='hot')
plt.axis('off')
plt.show()